# 深入模块
'''
模块除了方法定义，还可以包括可执行的代码。这些代码一般用来初始化这个模块。这些代码只有在第一次被导入时才会被执行。

每个模块有各自独立的符号表，在模块内部为所有的函数当作全局符号表来使用。

所以，模块的作者可以放心大胆的在模块内部使用这些全局变量，而不用担心把其他用户的全局变量搞混。

从另一个方面，当你确实知道你在做什么的话，你也可以通过 modname.itemname 这样的表示法来访问模块内的函数。

模块是可以导入其他模块的。在一个模块（或者脚本，或者其他地方）的最前面使用 import 来导入一个模块，当然这只是一个惯例，而不是强制的。被导入的模块的名称将被放入当前操作的模块的符号表中。
'''
from fibo import fib, fib2
fib(500) # 1 1 2 3 5 8 13 21 34 55 89 144 233 377 
fib2n = fib2(100)
print(fib2n) # [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]

# 这种导入的方法不会把被导入的模块的名称放在当前的字符表中（所以在这个例子里面，fibo 这个名称是没有定义的）。

# 这还有一种方法，可以一次性的把模块中的所有（函数，变量）名称都导入到当前模块的字符表:


print('---------黄金分割线-----------')


# from fibo import *
fib(500) # 1 1 2 3 5 8 13 21 34 55 89 144 233 377 
fib2n = fib2(100)
print(fib2n) # [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
# 这将把所有的名字都导入进来，但是那些由单一下划线（_）开头的名字不在此例。大多数情况， Python程序员不使用这种方法，因为引入的其它来源的命名，很可能覆盖了已有的定义。
